package _20220704_MergeKHeaps;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;

@RunWith(Parameterized.class)
public class SolutionTest {

    private Solution solution;

    @Parameterized.Parameter
    public int[][] heaps;

    @Parameterized.Parameters
    public static Object[][] data() {
        return new Object[][]{
                {new int[][]{{0, 1, 2}, {1, 2}, {3, 5, 8}}},
                {new int[][]{{}}},
                {new int[][]{}},
                {new int[][]{{0, 1, 2, 3, 2}, {1, 2}, {3, 5, 8}}},
                {new int[][]{
                        {1, 1, 2, 5, 6, 17, 10, 72, 5, 15, 28, 23, 33, 47, 11, 92, 86, 11, 84, 87, 49, 30, 70, 90, 100, 53, 53, 82, 69, 62, 36},
                        {10, 23, 11, 35, 55, 28, 27, 74, 36, 87, 67, 31, 34, 29, 39, 84, 74, 88, 69, 93, 91, 73, 93, 44, 71, 89, 79, 82, 61, 95, 50},
                        {1, 1, 8, 4, 4, 29, 10, 20, 25, 16, 9, 46, 75, 23, 75, 42, 61, 86, 91, 71, 91, 72, 47, 92, 73, 88, 99, 48, 92, 95, 82},
                        {4, 6, 7, 10, 21, 12, 31, 60, 16, 36, 36, 36, 32, 32, 46, 84, 68, 40, 21, 79, 48, 83, 49, 72, 38, 40, 72, 96, 35, 47, 55},
                        {5, 10, 12, 24, 24, 13, 36, 72, 40, 57, 57, 73, 14, 41, 56, 96, 82, 72, 46, 98, 99, 70, 61, 87, 82, 95, 96, 99, 61, 62, 60},
                        {8, 11, 13, 20, 14, 24, 13, 21, 25, 52, 20, 48, 29, 43, 31, 69, 35, 94, 68, 64, 76, 45, 89, 80, 49, 92, 59, 64, 71, 58, 87},
                        {1, 3, 10, 9, 34, 13, 18, 20, 28, 44, 64, 42, 20, 56, 40, 46, 81, 66, 46, 68, 80, 78, 84, 99, 58, 35, 89, 69, 64, 60, 60},
                        {12, 13, 19, 21, 17, 37, 21, 32, 32, 28, 41, 50, 41, 45, 37, 70, 50, 76, 34, 63, 40, 84, 42, 66, 73, 61, 100, 91, 95, 39, 41},
                        {12, 16, 21, 19, 56, 24, 25, 26, 30, 66, 57, 54, 49, 25, 62, 54, 69, 96, 59, 91, 67, 62, 75, 88, 68, 77, 83, 69, 75, 62, 80},
                        {1, 11, 13, 14, 12, 18, 14, 16, 54, 36, 17, 59, 29, 19, 34, 82, 48, 85, 72, 89, 61, 78, 54, 76, 69, 62, 41, 43, 56, 77, 89},
                        {4, 5, 12, 19, 8, 22, 13, 44, 37, 32, 18, 62, 37, 14, 30, 48, 97, 46, 39, 88, 45, 73, 85, 75, 65, 40, 95, 74, 69, 83, 88},
                        {1, 1, 9, 45, 16, 11, 18, 48, 54, 62, 20, 30, 20, 38, 53, 54, 76, 71, 93, 88, 66, 77, 43, 70, 99, 63, 66, 92, 77, 93, 58},
                        {2, 8, 17, 16, 19, 31, 50, 20, 31, 27, 41, 54, 71, 52, 62, 53, 100, 83, 61, 88, 62, 64, 79, 79, 90, 75, 97, 70, 85, 69, 73},
                        {5, 8, 7, 23, 72, 8, 20, 29, 72, 82, 85, 34, 41, 27, 32, 98, 76, 76, 86, 94, 84, 90, 100, 60, 75, 94, 79, 59, 73, 47, 68},
                        {4, 8, 23, 9, 10, 44, 29, 38, 33, 16, 20, 71, 80, 33, 73, 55, 80, 87, 58, 22, 99, 92, 85, 81, 96, 96, 94, 48, 72, 74, 85},
                        {1, 23, 4, 30, 44, 5, 9, 39, 60, 47, 63, 43, 62, 10, 19, 55, 77, 77, 62, 55, 73, 72, 65, 56, 86, 82, 80, 88, 80, 57, 90},
                        {1, 9, 1, 11, 21, 11, 4, 18, 15, 22, 49, 82, 28, 58, 77, 30, 87, 37, 56, 91, 91, 64, 53, 100, 91, 55, 93, 59, 70, 91, 93},
                        {7, 8, 7, 8, 9, 9, 27, 11, 15, 13, 46, 32, 22, 30, 34, 82, 46, 99, 26, 16, 63, 73, 91, 100, 73, 72, 68, 95, 78, 77, 62},
                        {2, 4, 17, 7, 33, 27, 19, 26, 54, 35, 34, 60, 34, 66, 21, 29, 38, 59, 86, 100, 46, 92, 43, 81, 86, 73, 87, 79, 86, 54, 79},
                        {6, 7, 14, 8, 55, 28, 20, 21, 38, 64, 77, 40, 31, 53, 75, 50, 90, 74, 51, 94, 85, 93, 95, 50, 84, 40, 52, 61, 92, 99, 78},
                        {1, 8, 9, 29, 11, 23, 22, 70, 33, 11, 31, 31, 74, 74, 72, 76, 94, 72, 52, 94, 89, 89, 97, 98, 80, 82, 87, 96, 91, 90, 79},
                        {1, 2, 6, 3, 12, 9, 29, 31, 19, 59, 44, 28, 68, 32, 34, 46, 53, 94, 55, 64, 70, 65, 98, 84, 76, 88, 72, 82, 99, 83, 39},
                        {7, 8, 17, 11, 25, 22, 20, 30, 14, 54, 34, 73, 46, 47, 50, 73, 74, 24, 23, 93, 68, 49, 35, 84, 79, 79, 95, 58, 62, 64, 93},
                        {1, 3, 4, 4, 40, 9, 9, 24, 27, 78, 58, 50, 11, 64, 29, 38, 100, 65, 97, 84, 100, 68, 73, 89, 96, 37, 41, 95, 98, 50, 42},
                        {6, 11, 7, 29, 19, 30, 23, 45, 34, 34, 29, 64, 62, 48, 25, 81, 56, 61, 57, 54, 62, 46, 36, 85, 83, 72, 73, 85, 72, 49, 73},
                        {2, 19, 4, 22, 22, 29, 32, 27, 27, 24, 24, 60, 36, 39, 38, 80, 47, 98, 28, 99, 91, 98, 28, 89, 71, 51, 89, 78, 44, 41, 92},
                        {7, 14, 21, 26, 33, 29, 31, 46, 37, 39, 64, 33, 42, 37, 48, 86, 64, 56, 97, 56, 88, 72, 78, 39, 98, 61, 64, 65, 64, 54, 57},
                        {7, 8, 10, 22, 9, 12, 20, 76, 39, 46, 37, 62, 17, 25, 44, 86, 83, 99, 51, 87, 53, 66, 38, 73, 89, 73, 93, 59, 56, 46, 47},
                        {1, 6, 23, 33, 39, 28, 30, 48, 52, 71, 43, 31, 32, 48, 83, 57, 97, 57, 68, 94, 81, 44, 91, 97, 86, 82, 95, 74, 61, 90, 99},
                        {1, 6, 3, 23, 6, 9, 13, 36, 49, 19, 53, 12, 54, 29, 45, 76, 84, 70, 56, 26, 59, 58, 71, 88, 96, 85, 87, 67, 37, 84, 87},
                        {11, 11, 12, 16, 28, 13, 55, 28, 20, 32, 47, 79, 28, 55, 65, 90, 98, 45, 46, 98, 46, 69, 80, 95, 88, 69, 63, 61, 77, 77, 84}
                }}
        };
    }

    @Before
    public void setup() {
        solution = new Solution();
    }

    @Test
    public void test() {
        int[] result = solution.mergeKHeaps(heaps);
        int[] expected = build();
        Assert.assertEquals(expected.length, result.length);
        Assert.assertArrayEquals(expected, result);
    }

    private int[] build() {
        int total = 0;
        for (int[] heap : heaps) {
            if (heap != null) total += heap.length;
        }

        int[] result = new int[total];
        int i = 0;
        for (int[] heap : heaps) {
            for (int ele : heap) {
                result[i++] = ele;
            }
        }

        Arrays.sort(result);

        return result;
    }

}